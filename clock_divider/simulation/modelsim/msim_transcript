# Reading C:/intelFPGA_lite/17.1/modelsim_ase/tcl/vsim/pref.tcl
# do clock_divider_run_msim_rtl_verilog.do
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 10.5b Lib Mapping Utility 2016.10 Oct  5 2016
# vmap work rtl_work 
# Copying C:/intelFPGA_lite/17.1/modelsim_ase/win32aloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# 
# vlog -vlog01compat -work work +incdir+C:/Users/Kasem/Documents/Quartus_Projects/clock_divider {C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/CounterNBit.v}
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 03:45:53 on Mar 06,2019
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/Users/Kasem/Documents/Quartus_Projects/clock_divider" C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/CounterNBit.v 
# -- Compiling module CounterNBit
# 
# Top level modules:
# 	CounterNBit
# End time: 03:45:53 on Mar 06,2019, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -vlog01compat -work work +incdir+C:/Users/Kasem/Documents/Quartus_Projects/clock_divider {C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/Comparator32Bit.v}
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 03:45:53 on Mar 06,2019
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/Users/Kasem/Documents/Quartus_Projects/clock_divider" C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/Comparator32Bit.v 
# -- Compiling module Comparator32Bit
# 
# Top level modules:
# 	Comparator32Bit
# End time: 03:45:53 on Mar 06,2019, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -vlog01compat -work work +incdir+C:/Users/Kasem/Documents/Quartus_Projects/clock_divider {C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/clock_divider.v}
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 03:45:53 on Mar 06,2019
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/Users/Kasem/Documents/Quartus_Projects/clock_divider" C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/clock_divider.v 
# -- Compiling module clock_divider
# 
# Top level modules:
# 	clock_divider
# End time: 03:45:53 on Mar 06,2019, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# vlog -vlog01compat -work work +incdir+C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/simulation {C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/simulation/clock_divider_tb.v}
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 03:45:53 on Mar 06,2019
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/simulation" C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/simulation/clock_divider_tb.v 
# -- Compiling module clock_divider_tb
# 
# Top level modules:
# 	clock_divider_tb
# End time: 03:45:53 on Mar 06,2019, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cyclonev_ver -L cyclonev_hssi_ver -L cyclonev_pcie_hip_ver -L rtl_work -L work -voptargs="+acc"  clock_divider_tb
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cyclonev_ver -L cyclonev_hssi_ver -L cyclonev_pcie_hip_ver -L rtl_work -L work -voptargs=""+acc"" clock_divider_tb 
# Start time: 03:45:54 on Mar 06,2019
# Loading work.clock_divider_tb
# Loading work.clock_divider
# Loading work.CounterNBit
# Loading work.Comparator32Bit
# 
# do C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/simulation/load_sim.tcl
#
# NativeLink Simulation Initialisation Script
# ===========================================
# By: Thomas Carpenter
# Date: 31st December 2017
# For: University of Leeds
#
# Description
# ===========
# This is a basic sample script for initialising a simulation
#
# All commands in this script will be executed, and comments will
# be printed to the screen
#
# Most of the work in compiling is done by Quartus automatically.
# Here we can add some extra commands.
#
# There is lots of stuff you can do, such as running initialisation
# scripts, preparing memory contents, setting up the simulator.
#
# 
#
# First lets clean up any old NativeLink backup files. Quartus
# creates a new backup file every time it runs. It never deletes
# these files so you end up with an ever increasing number of them.
#
# The {*}[glob -nocomplain ... ] command performs wildcard matching
# of filenames, to make sure we get all .bak files. The "-nocomplain"
# and "catch {}" ensure that if no backups exist, there is no error.
#
# 
# catch {file delete {*}[glob -nocomplain *_msim_rtl_verilog.do.bak*]}
# 0
# 
#
# This will continue executing our script if a break point in the
# simulation is reached - for example the $stop command in Verilog
#
# 
# onbreak {resume}
# 
# 
# Once you add signals to the Wave view to see them graphically
# and got them all set up to your liking (Radix, arrangement, etc.)
# it is possible to save that layout as a "Waveform Format Do File".
# From modelsim if you click on the Wave window and File->Save Format
# this will generate the "Do" file for you.
#
# I will assume that you saved the file with name "wave.do" (default)
# in the simulation folder (same place as this TCL).
#
# Each time we run the simulation, we can run this file to restore 
# the setup:
#
#   do <filename>
#
# Of course the first time you run the simulation the file might not
# yet exist - you might never choose to save a format. So we also
# first check if the file exists before do-ing it.
# 
# 
# We normalise the filename to prevent issues with spaces in the filename
# set waveFile [file normalize "./wave.do"]
# C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/simulation/modelsim/wave.do
# 
# if { [file exists $waveFile] } {
#     #If the saved file exists, load it
#     do $waveFile
# } else {
#     #Otherwise simply add all signals in the testbench formatted as unsigned decimal.
#     add wave -radix unsigned -position insertpoint sim:/*
# }
# 
#
# Then we can configure the units for the timeline. Lets stick to
# nanoseconds instead of the default of picoseconds.
#
# 
# configure wave -timelineunits ns
# 
# 
# Next we can start the simulation. We simply say "run".
#
# The "run" command can be followed by a time parameter, such as:
#
#     run 100ns     # Run for 100ns
#     run -all      # Run until the testbench stops changing stimuli
#     run 10        # Run for 10 "timesteps" (typically 1ps per step)
#
# ========== Simulation Starts Here ===========
# 
# run -all
#                    0 ms	Simulation Started
#                    0 msenb=1\pwm=1clk=0rst=1clocks=         0
#             25000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#             50000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#             75000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#            100000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#            125000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#            150000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#            175000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#            200000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#            225000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#            250000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#            275000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#            300000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#            325000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#            350000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#            375000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#            400000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#            425000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#            450000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#            475000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#            500000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#            525000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#            550000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#            575000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#            600000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#            625000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#            650000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#            675000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#            700000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#            725000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#            750000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#            775000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#            800000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#            825000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#            850000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#            875000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#            900000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#            925000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#            950000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#            975000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#           1000000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#           1025000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#           1050000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#           1075000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#           1100000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#           1125000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#           1150000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#           1175000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#           1200000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#           1225000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#           1250000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#           1275000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#           1300000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#           1325000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#           1350000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#           1375000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#           1400000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#           1425000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#           1450000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#           1475000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#           1500000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#           1525000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#           1550000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#           1575000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#           1600000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#           1625000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#           1650000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#           1675000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#           1700000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#           1725000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#           1750000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#           1775000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#           1800000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#           1825000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#           1850000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#           1875000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#           1900000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#           1925000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#           1950000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#           1975000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#           2000000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#           2025000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#           2050000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#           2075000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#           2100000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#           2125000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#           2150000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#           2175000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#           2200000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#           2225000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#           2250000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#           2275000000 msenb=1\pwm=1clk=1rst=0clocks=         1
#           2300000000 msenb=1\pwm=1clk=0rst=0clocks=         1
#           2325000000 msenb=1\pwm=0clk=1rst=0clocks=         2
#           2350000000 msenb=1\pwm=0clk=0rst=0clocks=         2
#           2375000000 msenb=1\pwm=0clk=1rst=0clocks=         3
#           2400000000 msenb=1\pwm=0clk=0rst=0clocks=         3
#           2425000000 msenb=1\pwm=1clk=1rst=0clocks=         0
#           2450000000 msenb=1\pwm=1clk=0rst=0clocks=         0
#           2475000000 msenb=1\pwm=1clk=1rst=0clocks=         1
# ** Note: $stop    : C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/simulation/clock_divider_tb.v(88)
#    Time: 2500 us  Iteration: 0  Instance: /clock_divider_tb
# Break in Module clock_divider_tb at C:/Users/Kasem/Documents/Quartus_Projects/clock_divider/simulation/clock_divider_tb.v line 88
# altEditor error: invalid command name "external_editor"
# 
# ========== Simulation Ends Here ===========
#
# Once the simulation finishes we will reach here
#
# Let's for example zoom out in the wave display to fit all data
#
# 
# wave zoom full
# 0 ps
# 2625 us
# End time: 03:51:07 on Mar 06,2019, Elapsed time: 0:05:13
# Errors: 1, Warnings: 0
